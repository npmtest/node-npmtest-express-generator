{"/home/travis/build/npmtest/node-npmtest-express-generator/test.js":"/* istanbul instrument in package npmtest_express_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-generator/lib.npmtest_express_generator.js":"/* istanbul instrument in package npmtest_express_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_generator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_generator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-generator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-generator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_generator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_generator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_generator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_generator.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_generator.__dirname + '/lib.npmtest_express_generator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-generator/node_modules/express-generator/bin/express-cli.js":"#!/usr/bin/env node\n\nvar ejs = require('ejs')\nvar fs = require('fs')\nvar mkdirp = require('mkdirp')\nvar path = require('path')\nvar program = require('commander')\nvar readline = require('readline')\nvar sortedObject = require('sorted-object')\nvar util = require('util')\n\nvar MODE_0666 = parseInt('0666', 8)\nvar MODE_0755 = parseInt('0755', 8)\n\nvar _exit = process.exit\nvar pkg = require('../package.json')\n\nvar version = pkg.version\n\n// Re-assign process.exit because of commander\n// TODO: Switch to a different command framework\nprocess.exit = exit\n\n// CLI\n\naround(program, 'optionMissingArgument', function (fn, args) {\n  program.outputHelp()\n  fn.apply(this, args)\n  return { args: [], unknown: [] }\n})\n\nbefore(program, 'outputHelp', function () {\n  // track if help was shown for unknown option\n  this._helpShown = true\n})\n\nbefore(program, 'unknownOption', function () {\n  // allow unknown options if help was shown, to prevent trailing error\n  this._allowUnknownOption = this._helpShown\n\n  // show help if not yet shown\n  if (!this._helpShown) {\n    program.outputHelp()\n  }\n})\n\nprogram\n  .version(version, '    --version')\n  .usage('[options] [dir]')\n  .option('-e, --ejs', 'add ejs engine support', renamedOption('--ejs', '--view=ejs'))\n  .option('    --pug', 'add pug engine support', renamedOption('--pug', '--view=pug'))\n  .option('    --hbs', 'add handlebars engine support', renamedOption('--hbs', '--view=hbs'))\n  .option('-H, --hogan', 'add hogan.js engine support', renamedOption('--hogan', '--view=hogan'))\n  .option('-v, --view <engine>', 'add view <engine> support (dust|ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)')\n  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)')\n  .option('    --git', 'add .gitignore')\n  .option('-f, --force', 'force on non-empty directory')\n  .parse(process.argv)\n\nif (!exit.exited) {\n  main()\n}\n\n/**\n * Install an around function; AOP.\n */\n\nfunction around (obj, method, fn) {\n  var old = obj[method]\n\n  obj[method] = function () {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) args[i] = arguments[i]\n    return fn.call(this, old, args)\n  }\n}\n\n/**\n * Install a before function; AOP.\n */\n\nfunction before (obj, method, fn) {\n  var old = obj[method]\n\n  obj[method] = function () {\n    fn.call(this)\n    old.apply(this, arguments)\n  }\n}\n\n/**\n * Prompt for confirmation on STDOUT/STDIN\n */\n\nfunction confirm (msg, callback) {\n  var rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  })\n\n  rl.question(msg, function (input) {\n    rl.close()\n    callback(/^y|yes|ok|true$/i.test(input))\n  })\n}\n\n/**\n * Copy file from template directory.\n */\n\nfunction copyTemplate (from, to) {\n  from = path.join(__dirname, '..', 'templates', from)\n  write(to, fs.readFileSync(from, 'utf-8'))\n}\n\n/**\n * Create application at the given directory `path`.\n *\n * @param {String} path\n */\n\nfunction createApplication (name, path) {\n  var wait = 5\n\n  console.log()\n  function complete () {\n    if (--wait) return\n    var prompt = launchedFromCmd() ? '>' : '$'\n\n    console.log()\n    console.log('   install dependencies:')\n    console.log('     %s cd %s && npm install', prompt, path)\n    console.log()\n    console.log('   run the app:')\n\n    if (launchedFromCmd()) {\n      console.log('     %s SET DEBUG=%s:* & npm start', prompt, name)\n    } else {\n      console.log('     %s DEBUG=%s:* npm start', prompt, name)\n    }\n\n    console.log()\n  }\n\n  // JavaScript\n  var app = loadTemplate('js/app.js')\n  var www = loadTemplate('js/www')\n\n  // App name\n  www.locals.name = name\n\n  // App modules\n  app.locals.modules = Object.create(null)\n  app.locals.uses = []\n\n  mkdir(path, function () {\n    mkdir(path + '/public', function () {\n      mkdir(path + '/public/javascripts')\n      mkdir(path + '/public/images')\n      mkdir(path + '/public/stylesheets', function () {\n        switch (program.css) {\n          case 'less':\n            copyTemplate('css/style.less', path + '/public/stylesheets/style.less')\n            break\n          case 'stylus':\n            copyTemplate('css/style.styl', path + '/public/stylesheets/style.styl')\n            break\n          case 'compass':\n            copyTemplate('css/style.scss', path + '/public/stylesheets/style.scss')\n            break\n          case 'sass':\n            copyTemplate('css/style.sass', path + '/public/stylesheets/style.sass')\n            break\n          default:\n            copyTemplate('css/style.css', path + '/public/stylesheets/style.css')\n            break\n        }\n        complete()\n      })\n    })\n\n    mkdir(path + '/routes', function () {\n      copyTemplate('js/routes/index.js', path + '/routes/index.js')\n      copyTemplate('js/routes/users.js', path + '/routes/users.js')\n      complete()\n    })\n\n    mkdir(path + '/views', function () {\n      switch (program.view) {\n        case 'dust':\n          copyTemplate('dust/index.dust', path + '/views/index.dust')\n          copyTemplate('dust/error.dust', path + '/views/error.dust')\n          break\n        case 'ejs':\n          copyTemplate('ejs/index.ejs', path + '/views/index.ejs')\n          copyTemplate('ejs/error.ejs', path + '/views/error.ejs')\n          break\n        case 'jade':\n          copyTemplate('jade/index.jade', path + '/views/index.jade')\n          copyTemplate('jade/layout.jade', path + '/views/layout.jade')\n          copyTemplate('jade/error.jade', path + '/views/error.jade')\n          break\n        case 'hjs':\n          copyTemplate('hogan/index.hjs', path + '/views/index.hjs')\n          copyTemplate('hogan/error.hjs', path + '/views/error.hjs')\n          break\n        case 'hbs':\n          copyTemplate('hbs/index.hbs', path + '/views/index.hbs')\n          copyTemplate('hbs/layout.hbs', path + '/views/layout.hbs')\n          copyTemplate('hbs/error.hbs', path + '/views/error.hbs')\n          break\n        case 'pug':\n          copyTemplate('pug/index.pug', path + '/views/index.pug')\n          copyTemplate('pug/layout.pug', path + '/views/layout.pug')\n          copyTemplate('pug/error.pug', path + '/views/error.pug')\n          break\n        case 'twig':\n          copyTemplate('twig/index.twig', path + '/views/index.twig')\n          copyTemplate('twig/layout.twig', path + '/views/layout.twig')\n          copyTemplate('twig/error.twig', path + '/views/error.twig')\n          break\n        case 'vash':\n          copyTemplate('vash/index.vash', path + '/views/index.vash')\n          copyTemplate('vash/layout.vash', path + '/views/layout.vash')\n          copyTemplate('vash/error.vash', path + '/views/error.vash')\n          break\n      }\n      complete()\n    })\n\n    // CSS Engine support\n    switch (program.css) {\n      case 'less':\n        app.locals.modules.lessMiddleware = 'less-middleware'\n        app.locals.uses.push(\"lessMiddleware(path.join(__dirname, 'public'))\")\n        break\n      case 'stylus':\n        app.locals.modules.stylus = 'stylus'\n        app.locals.uses.push(\"stylus.middleware(path.join(__dirname, 'public'))\")\n        break\n      case 'compass':\n        app.locals.modules.compass = 'node-compass'\n        app.locals.uses.push(\"compass({ mode: 'expanded' })\")\n        break\n      case 'sass':\n        app.locals.modules.sassMiddleware = 'node-sass-middleware'\n        app.locals.uses.push(\"sassMiddleware({\\n  src: path.join(__dirname, 'public'),\\n  dest: path.join(__dirname, 'public'),\\n  indentedSyntax: true, // true = .sass and false = .scss\\n  sourceMap: true\\n})\")\n        break\n    }\n\n    // Template support\n    switch (program.view) {\n      case 'dust':\n        app.locals.modules.adaro = 'adaro'\n        app.locals.view = {\n          engine: 'dust',\n          render: 'adaro.dust()'\n        }\n        break\n      default:\n        app.locals.view = {\n          engine: program.view\n        }\n        break\n    }\n\n    // package.json\n    var pkg = {\n      name: name,\n      version: '0.0.0',\n      private: true,\n      scripts: {\n        start: 'node ./bin/www'\n      },\n      dependencies: {\n        'body-parser': '~1.17.1',\n        'cookie-parser': '~1.4.3',\n        'debug': '~2.6.3',\n        'express': '~4.15.2',\n        'morgan': '~1.8.1',\n        'serve-favicon': '~2.4.2'\n      }\n    }\n\n    switch (program.view) {\n      case 'dust':\n        pkg.dependencies.adaro = '~1.0.4'\n        break\n      case 'jade':\n        pkg.dependencies['jade'] = '~1.11.0'\n        break\n      case 'ejs':\n        pkg.dependencies['ejs'] = '~2.5.6'\n        break\n      case 'hjs':\n        pkg.dependencies['hjs'] = '~0.0.6'\n        break\n      case 'hbs':\n        pkg.dependencies['hbs'] = '~4.0.1'\n        break\n      case 'pug':\n        pkg.dependencies['pug'] = '~2.0.0-beta11'\n        break\n      case 'twig':\n        pkg.dependencies['twig'] = '~0.10.3'\n        break\n      case 'vash':\n        pkg.dependencies['vash'] = '~0.12.2'\n        break\n    }\n\n    // CSS Engine support\n    switch (program.css) {\n      case 'less':\n        pkg.dependencies['less-middleware'] = '~2.2.0'\n        break\n      case 'compass':\n        pkg.dependencies['node-compass'] = '0.2.3'\n        break\n      case 'stylus':\n        pkg.dependencies['stylus'] = '0.54.5'\n        break\n      case 'sass':\n        pkg.dependencies['node-sass-middleware'] = '0.9.8'\n        break\n    }\n\n    // sort dependencies like npm(1)\n    pkg.dependencies = sortedObject(pkg.dependencies)\n\n    // write files\n    write(path + '/package.json', JSON.stringify(pkg, null, 2) + '\\n')\n    write(path + '/app.js', app.render())\n    mkdir(path + '/bin', function () {\n      write(path + '/bin/www', www.render(), MODE_0755)\n      complete()\n    })\n\n    if (program.git) {\n      copyTemplate('js/gitignore', path + '/.gitignore')\n    }\n\n    complete()\n  })\n}\n\n/**\n * Create an app name from a directory path, fitting npm naming requirements.\n *\n * @param {String} pathName\n */\n\nfunction createAppName (pathName) {\n  return path.basename(pathName)\n    .replace(/[^A-Za-z0-9.()!~*'-]+/g, '-')\n    .replace(/^[-_.]+|-+$/g, '')\n    .toLowerCase()\n}\n\n/**\n * Check if the given directory `path` is empty.\n *\n * @param {String} path\n * @param {Function} fn\n */\n\nfunction emptyDirectory (path, fn) {\n  fs.readdir(path, function (err, files) {\n    if (err && err.code !== 'ENOENT') throw err\n    fn(!files || !files.length)\n  })\n}\n\n/**\n * Graceful exit for async STDIO\n */\n\nfunction exit (code) {\n  // flush output for Node.js Windows pipe bug\n  // https://github.com/joyent/node/issues/6247 is just one bug example\n  // https://github.com/visionmedia/mocha/issues/333 has a good discussion\n  function done () {\n    if (!(draining--)) _exit(code)\n  }\n\n  var draining = 0\n  var streams = [process.stdout, process.stderr]\n\n  exit.exited = true\n\n  streams.forEach(function (stream) {\n    // submit empty write request and wait for completion\n    draining += 1\n    stream.write('', done)\n  })\n\n  done()\n}\n\n/**\n * Determine if launched from cmd.exe\n */\n\nfunction launchedFromCmd () {\n  return process.platform === 'win32' &&\n    process.env._ === undefined\n}\n\n/**\n * Load template file.\n */\n\nfunction loadTemplate (name) {\n  var contents = fs.readFileSync(path.join(__dirname, '..', 'templates', (name + '.ejs')), 'utf-8')\n  var locals = Object.create(null)\n\n  function render () {\n    return ejs.render(contents, locals)\n  }\n\n  return {\n    locals: locals,\n    render: render\n  }\n}\n\n/**\n * Main program.\n */\n\nfunction main () {\n  // Path\n  var destinationPath = program.args.shift() || '.'\n\n  // App name\n  var appName = createAppName(path.resolve(destinationPath)) || 'hello-world'\n\n  // View engine\n  if (program.view === undefined) {\n    if (program.ejs) program.view = 'ejs'\n    if (program.hbs) program.view = 'hbs'\n    if (program.hogan) program.view = 'hjs'\n    if (program.pug) program.view = 'pug'\n  }\n\n  // Default view engine\n  if (program.view === undefined) {\n    warning('the default view engine will not be jade in future releases\\n' +\n      \"use `--view=jade' or `--help' for additional options\")\n    program.view = 'jade'\n  }\n\n  // Generate application\n  emptyDirectory(destinationPath, function (empty) {\n    if (empty || program.force) {\n      createApplication(appName, destinationPath)\n    } else {\n      confirm('destination is not empty, continue? [y/N] ', function (ok) {\n        if (ok) {\n          process.stdin.destroy()\n          createApplication(appName, destinationPath)\n        } else {\n          console.error('aborting')\n          exit(1)\n        }\n      })\n    }\n  })\n}\n\n/**\n * Mkdir -p.\n *\n * @param {String} path\n * @param {Function} fn\n */\n\nfunction mkdir (path, fn) {\n  mkdirp(path, MODE_0755, function (err) {\n    if (err) throw err\n    console.log('   \\x1b[36mcreate\\x1b[0m : ' + path)\n    fn && fn()\n  })\n}\n\n/**\n * Generate a callback function for commander to warn about renamed option.\n *\n * @param {String} originalName\n * @param {String} newName\n */\n\nfunction renamedOption (originalName, newName) {\n  return function (val) {\n    warning(util.format(\"option `%s' has been renamed to `%s'\", originalName, newName))\n    return val\n  }\n}\n\n/**\n * Display a warning similar to how errors are displayed by commander.\n *\n * @param {String} message\n */\n\nfunction warning (message) {\n  console.error()\n  message.split('\\n').forEach(function (line) {\n    console.error('  warning: %s', line)\n  })\n  console.error()\n}\n\n/**\n * echo str > path.\n *\n * @param {String} path\n * @param {String} str\n */\n\nfunction write (path, str, mode) {\n  fs.writeFileSync(path, str, { mode: mode || MODE_0666 })\n  console.log('   \\x1b[36mcreate\\x1b[0m : ' + path)\n}\n"}